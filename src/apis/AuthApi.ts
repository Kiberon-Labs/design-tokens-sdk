/* tslint:disable */
/* eslint-disable */
/**
 * Kiberon Labs Design Tokens API
 * OpenAPI compliant REST API built using tRPC
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime.js';
import type {
  ErrorBADREQUEST,
  ErrorFORBIDDEN,
  ErrorINTERNALSERVERERROR,
  ErrorNOTFOUND,
  ErrorUNAUTHORIZED,
  PostHello200Response,
} from '../models/index.js';
import {
    ErrorBADREQUESTFromJSON,
    ErrorBADREQUESTToJSON,
    ErrorFORBIDDENFromJSON,
    ErrorFORBIDDENToJSON,
    ErrorINTERNALSERVERERRORFromJSON,
    ErrorINTERNALSERVERERRORToJSON,
    ErrorNOTFOUNDFromJSON,
    ErrorNOTFOUNDToJSON,
    ErrorUNAUTHORIZEDFromJSON,
    ErrorUNAUTHORIZEDToJSON,
    PostHello200ResponseFromJSON,
    PostHello200ResponseToJSON,
} from '../models/index.js';

export interface PostHelloRequest {
    text: string;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * gets a hello
     */
    async postHelloRaw(requestParameters: PostHelloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostHello200Response>> {
        if (requestParameters['text'] == null) {
            throw new runtime.RequiredError(
                'text',
                'Required parameter "text" was null or undefined when calling postHello().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['text'] != null) {
            queryParameters['text'] = requestParameters['text'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // ApiKeyAuth authentication
        }


        let urlPath = `/notes`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostHello200ResponseFromJSON(jsonValue));
    }

    /**
     * gets a hello
     */
    async postHello(requestParameters: PostHelloRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostHello200Response> {
        const response = await this.postHelloRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
